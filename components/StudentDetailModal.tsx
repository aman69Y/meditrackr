import React from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Modal, Dimensions } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { X, Download, Calendar, Ruler, Weight, User } from 'lucide-react-native';
import { LineChart, BarChart } from 'react-native-chart-kit';
import Animated, { FadeIn, SlideInUp } from 'react-native-reanimated';
import { Student } from '../types/Student';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

interface StudentDetailModalProps {
  visible: boolean;
  student: Student | null;
  onClose: () => void;
}

const screenWidth = Dimensions.get('window').width;

export default function StudentDetailModal({ visible, student, onClose }: StudentDetailModalProps) {
  if (!student) return null;

  const chartConfig = {
    backgroundGradientFrom: '#ffffff',
    backgroundGradientTo: '#ffffff',
    color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
    strokeWidth: 2,
    barPercentage: 0.5,
    useShadowColorFromDataset: false,
    decimalPlaces: 1,
    propsForLabels: {
      fontSize: 12,
      fontWeight: '500',
    },
  };

  const getBMIColor = (bmi: number) => {
    if (bmi < 18.5) return '#FF9500';
    if (bmi >= 18.5 && bmi < 25) return '#34C759';
    if (bmi >= 25 && bmi < 30) return '#FF9500';
    return '#FF3B30';
  };

  const generateHealthReport = async () => {
    const reportData = {
      studentName: student.name,
      class: student.class,
      rollNo: student.rollNo,
      age: student.age,
      weight: student.weight,
      height: student.height,
      bmi: student.bmi,
      bmiCategory: student.bmiCategory,
      generatedAt: new Date().toISOString(),
    };

    const reportContent = `
MEDITRACKR HEALTH REPORT
========================

Student Information:
- Name: ${reportData.studentName}
- Class: ${reportData.class}
- Roll Number: ${reportData.rollNo}
- Age: ${reportData.age} years

Health Metrics:
- Weight: ${reportData.weight} kg
- Height: ${reportData.height} cm
- BMI: ${reportData.bmi}
- BMI Category: ${reportData.bmiCategory}

Report Generated: ${new Date(reportData.generatedAt).toLocaleString()}

---
Generated by MediTrackr App
    `;

    try {
      const fileUri = FileSystem.documentDirectory + `${student.name}_health_report.txt`;
      await FileSystem.writeAsStringAsync(fileUri, reportContent);
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri);
      }
    } catch (error) {
      console.error('Error generating report:', error);
    }
  };

  // Mock historical data for demonstration
  const historicalBMI = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    datasets: [{
      data: [student.bmi - 0.5, student.bmi - 0.3, student.bmi - 0.1, student.bmi, student.bmi + 0.1, student.bmi],
      color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
      strokeWidth: 2,
    }],
  };

  const healthMetrics = {
    labels: ['Weight', 'Height', 'BMI'],
    datasets: [{
      data: [student.weight, student.height / 10, student.bmi * 5],
      colors: [
        (opacity = 1) => `rgba(52, 199, 89, ${opacity})`,
        (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
        (opacity = 1) => getBMIColor(student.bmi) + Math.floor(opacity * 255).toString(16),
      ]
    }],
  };

  return (
    <Modal visible={visible} animationType="none" transparent>
      <Animated.View entering={FadeIn} style={styles.overlay}>
        <BlurView intensity={50} tint="light" style={styles.blurOverlay}>
          <Animated.View entering={SlideInUp.springify()} style={styles.modal}>
            <View style={styles.header}>
              <View style={styles.headerContent}>
                <View style={styles.headerLeft}>
                  <Text style={styles.studentName}>{student.name}</Text>
                  <Text style={styles.studentInfo}>Class {student.class} ‚Ä¢ Roll {student.rollNo}</Text>
                </View>
                <View style={styles.headerRight}>
                  <TouchableOpacity style={styles.downloadBtn} onPress={generateHealthReport}>
                    <Download size={18} color="#007AFF" strokeWidth={2} />
                  </TouchableOpacity>
                  <TouchableOpacity style={styles.closeBtn} onPress={onClose}>
                    <X size={18} color="#8E8E93" strokeWidth={2} />
                  </TouchableOpacity>
                </View>
              </View>
            </View>

            <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
              <View style={styles.metricsGrid}>
                <View style={styles.metricCard}>
                  <User size={20} color="#007AFF" />
                  <Text style={styles.metricValue}>{student.age}</Text>
                  <Text style={styles.metricLabel}>Years Old</Text>
                </View>
                <View style={styles.metricCard}>
                  <Weight size={20} color="#34C759" />
                  <Text style={styles.metricValue}>{student.weight}</Text>
                  <Text style={styles.metricLabel}>kg</Text>
                </View>
                <View style={styles.metricCard}>
                  <Ruler size={20} color="#FF9500" />
                  <Text style={styles.metricValue}>{student.height}</Text>
                  <Text style={styles.metricLabel}>cm</Text>
                </View>
              </View>

              <View style={styles.bmiCard}>
                <Text style={styles.bmiTitle}>Body Mass Index</Text>
                <Text style={[styles.bmiValue, { color: getBMIColor(student.bmi) }]}>
                  {student.bmi}
                </Text>
                <Text style={[styles.bmiCategory, { color: getBMIColor(student.bmi) }]}>
                  {student.bmiCategory}
                </Text>
              </View>

              <View style={styles.chartCard}>
                <Text style={styles.chartTitle}>BMI Trend (Last 6 Months)</Text>
                <LineChart
                  data={historicalBMI}
                  width={screenWidth - 80}
                  height={200}
                  chartConfig={chartConfig}
                  bezier
                  style={styles.chart}
                />
              </View>

              <View style={styles.chartCard}>
                <Text style={styles.chartTitle}>Health Metrics Overview</Text>
                <BarChart
                  data={healthMetrics}
                  width={screenWidth - 80}
                  height={200}
                  chartConfig={chartConfig}
                  style={styles.chart}
                  showValuesOnTopOfBars
                />
              </View>

              <View style={styles.recommendationsCard}>
                <Text style={styles.recommendationsTitle}>Health Recommendations</Text>
                {student.bmiCategory === 'Normal' && (
                  <Text style={styles.recommendationText}>
                    ‚úÖ Excellent! Maintain current healthy lifestyle with balanced diet and regular exercise.
                  </Text>
                )}
                {student.bmiCategory === 'Underweight' && (
                  <Text style={styles.recommendationText}>
                    ‚ö†Ô∏è Consider increasing caloric intake with nutritious foods and consult a healthcare provider.
                  </Text>
                )}
                {student.bmiCategory === 'Overweight' && (
                  <Text style={styles.recommendationText}>
                    ‚ö†Ô∏è Focus on balanced diet and increased physical activity. Consider consulting a nutritionist.
                  </Text>
                )}
                {student.bmiCategory === 'Obese' && (
                  <Text style={styles.recommendationText}>
                    üö® Important to consult healthcare provider for personalized weight management plan.
                  </Text>
                )}
              </View>
            </ScrollView>
          </Animated.View>
        </BlurView>
      </Animated.View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
  },
  blurOverlay: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  modal: {
    backgroundColor: '#F2F2F7',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '90%',
    overflow: 'hidden',
  },
  header: {
    backgroundColor: '#ffffff',
    paddingTop: 20,
    paddingBottom: 16,
    paddingHorizontal: 20,
    borderBottomWidth: 0.5,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  headerLeft: {
    flex: 1,
  },
  headerRight: {
    flexDirection: 'row',
    gap: 8,
  },
  studentName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1D1D1F',
    marginBottom: 2,
  },
  studentInfo: {
    fontSize: 13,
    color: '#8E8E93',
  },
  downloadBtn: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(0, 122, 255, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  closeBtn: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  metricsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  metricCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    flex: 1,
    marginHorizontal: 4,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  metricValue: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1D1D1F',
    marginTop: 8,
    marginBottom: 4,
  },
  metricLabel: {
    fontSize: 11,
    color: '#8E8E93',
  },
  bmiCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  bmiTitle: {
    fontSize: 15,
    fontWeight: '500',
    color: '#1D1D1F',
    marginBottom: 12,
  },
  bmiValue: {
    fontSize: 36,
    fontWeight: '700',
    marginBottom: 4,
  },
  bmiCategory: {
    fontSize: 16,
    fontWeight: '500',
  },
  chartCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  chartTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#1D1D1F',
    marginBottom: 12,
    textAlign: 'center',
  },
  chart: {
    borderRadius: 12,
  },
  recommendationsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  recommendationsTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#1D1D1F',
    marginBottom: 12,
  },
  recommendationText: {
    fontSize: 14,
    color: '#1D1D1F',
    lineHeight: 20,
  },
});